syntax = "proto3";

package api;

  service BrokerService {
    // ProducerAPI
    rpc SendMessages (SendMessagesRequest) returns (SendMessagesResponse);
    rpc GetLastMessage (GetLastMessageRequest) returns (GetLastMessageResponse);
    rpc CreateTopic (CreateTopicsRequest) returns (CreateTopicsResponse);
    rpc SendProducerMeta (SendProducerMetaRequest) returns (SendMetaResponse);

    // ConsumerAPI
    rpc RecieveMessages (RecieveMessagesRequest) returns (RecieveMessagesResponse);
    rpc SendConsumerMeta (SendConsumerMetaRequest) returns (SendMetaResponse);
    rpc CreateConsumer (CreateConsumerRequest) returns (CreateConsumerResponse);

    // CommonAPI
    rpc RecieveMeta (RecieveMetaRequest) returns (RecieveMetaResponse);


    // TODO: Delete or Remove
    // rpc DeleteTopic (DeleteTopicRequest) returns (DeleteTopicResponse);
    // rpc ListTopics (ListTopicsRequest) returns (ListTopicResponse);
  }

  message Message {
    uint64 seq = 1;
    uint64 timestamp = 2;
    bytes payload = 3;
    map<string, bytes> meta = 4;
  }

  message MessageWithRoute {
    Message message = 1;
    string topic = 2;

  }

  message Error {
    uint64 code = 1;
    map<string, string> data = 2;
  }

  message SendMessagesRequest {
    repeated MessageWithRoute messages = 1;
  }

  message SendMessagesResponse {
    Error error = 1;
  }

  message RecieveMessagesRequest {
    string topic = 1;
    uint64 seq = 2;
    uint32 maxBatch = 3;
  }

  message RecieveMessagesResponse {
    Error error = 1;
    repeated Message messages = 2;
  }

  message GetLastMessageRequest {
      string topic = 1;
  }

  message GetLastMessageResponse {
    Error error = 1;
    Message message = 2;
  }

  message CreateTopicsRequest {
      string topic = 1;
  }

  message CreateTopicsResponse {
    Error error = 1;
  }

  message RecieveMetaRequest {
    repeated string topics = 1;
  }

  message RecieveMetaResponse {
    Error error = 1;
    map<string /*topicName*/, uint64 /*seqNum*/> consumedSeqs = 2;
    map<string /*topicName*/, uint64 /*seqNum*/> producedSeqs = 3;
    map<string /*topicName*/, uint64 /*seqNum*/> storedSeqs = 4;
    map<string /*topicName*/, uint64 /*seqNum*/> availableSeqs = 5;
  }

  message SendConsumerMetaRequest {
    string consumerID = 1;  // Unique id of the consumer
    map<string /*topicName*/, uint64 /*seqNum*/> consumedSeqs = 2;
  }

  message SendProducerMetaRequest {
    map<string /*topicName*/, uint64 /*seqNum*/> producedSeqs = 1;
  }

  message SendMetaResponse {
    Error error = 1;
  }

  message CreateConsumerRequest {
    string consumerID = 1; // Unique id of the consumer
    repeated string topics = 2;
    string attachStrategy = 3; // can be "latest" - start consuming from the latest available messages in subscribed topics,
                               //        "earliest" - start consuming from the earliest available messages
  }

  message CreateConsumerResponse {
    Error error = 1;
  }